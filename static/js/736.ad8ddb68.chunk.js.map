{"version":3,"file":"static/js/736.ad8ddb68.chunk.js","mappings":"2OA4DA,UApDgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,QAAQC,IAAI,kBAAmBH,GAE/B,IAAAI,GAAwCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAsBtB,OApBAG,EAAAA,EAAAA,YAAU,WACR,GAAKlB,EAAL,CAEA,IAAMmB,EAAiB,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,OAFGF,EAAAC,KAAA,EAEtBb,GAAa,GAAMY,EAAAE,KAAA,GACAC,EAAAA,EAAAA,IAAqB5B,GAAS,KAAD,EAA1CwB,EAAIC,EAAAI,KACV3B,QAAQC,IAAI,uBAAwBqB,GACpCtB,QAAQC,IAAI,uBAAwBqB,EAAKM,QAASN,EAAKM,QAAQC,QAC/DtB,EAAgBe,EAAKM,SAASL,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAO,GAAAP,EAAA,SAE9BR,EAASQ,EAAAO,GAAMC,SAAS,QAEJ,OAFIR,EAAAC,KAAA,GAExBb,GAAa,GAAOY,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAZ,EAAA,yBAEvB,kBAZsB,OAAAH,EAAAgB,MAAA,KAAAC,UAAA,KAcvBlB,GAhBoB,CAiBtB,GAAG,CAACnB,KAGFsC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACG3B,IAAa4B,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACpBzB,IAASwB,EAAAA,EAAAA,KAACE,EAAAA,EAAY,CAACT,QAASjB,IACR,IAAxBR,EAAauB,QACZS,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+CAEHC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAAD,SACG/B,EAAamC,KAAI,SAAAC,GAChB,OACEN,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKK,EAAOC,UACZL,EAAAA,EAAAA,KAAA,KAAAD,SAAIK,EAAOE,YAGjB,UAMZ,C","sources":["pages/Reviews.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Loader from 'components/Loader';\nimport ErrorMessage from 'components/ErrorMessage';\n\nimport { findMovieReviewsById } from 'services/api';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  console.log('movieId reviews', movieId);\n\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchMovieReviews = async () => {\n      try {\n        setIsLoading(true);\n        const data = await findMovieReviewsById(movieId);\n        console.log('findMovieReviewsById', data);\n        console.log('findMovieReviewsById', data.results, data.results.length);\n        setMovieReviews(data.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <ErrorMessage message={error} />}\n      {movieReviews.length === 0 ? (\n        <p>We don't have any reviews for this movie.</p>\n      ) : (\n        <div>\n          <ul>\n            {movieReviews.map(review => {\n              return (\n                <li>\n                  <h4>{review.author}</h4>\n                  <p>{review.content}</p>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["movieId","useParams","console","log","_useState","useState","_useState2","_slicedToArray","movieReviews","setMovieReviews","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","useEffect","fetchMovieReviews","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","findMovieReviewsById","sent","results","length","t0","message","finish","stop","apply","arguments","_jsxs","children","_jsx","Loader","ErrorMessage","map","review","author","content"],"sourceRoot":""}