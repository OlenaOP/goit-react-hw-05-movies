{"version":3,"file":"static/js/493.a7abdf35.chunk.js","mappings":"2OA8DA,UAtDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,QAAQC,IAAI,UAAWH,GAIvB,IAAAI,GAAwCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAqBtB,OAnBAG,EAAAA,EAAAA,YAAU,WACR,GAAKlB,EAAL,CAEA,IAAMmB,EAAiB,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,OAFGF,EAAAC,KAAA,EAEtBb,GAAa,GAAMY,EAAAE,KAAA,GACAC,EAAAA,EAAAA,IAAqB5B,GAAS,KAAD,EAA1CwB,EAAIC,EAAAI,KACV3B,QAAQC,IAAI,uBAAwBqB,GACpCf,EAAgBe,GAAMC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEtBR,EAASQ,EAAAK,GAAMC,SAAS,QAEJ,OAFIN,EAAAC,KAAA,GAExBb,GAAa,GAAOY,EAAAO,OAAA,6BAAAP,EAAAQ,OAAA,GAAAV,EAAA,wBAEvB,kBAXsB,OAAAH,EAAAc,MAAA,KAAAC,UAAA,KAavBhB,GAfoB,CAgBtB,GAAG,CAACnB,KAGFoC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGzB,IAAa0B,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACpBvB,IAASsB,EAAAA,EAAAA,KAACE,EAAAA,EAAY,CAACT,QAASf,IACf,OAAjBR,IACC8B,EAAAA,EAAAA,KAAA,MAAAD,SACG7B,EAAaiC,KAAKC,KAAI,SAAAD,GACrB,OACEL,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACEK,IAAG,mCAAAC,OAAqCH,EAAKI,cAC7CC,IAAKL,EAAKM,KACVC,MAAM,WAERV,EAAAA,EAAAA,KAAA,KAAAD,SAAII,EAAKM,QACTX,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAYI,EAAKQ,eAPbR,EAAKS,GAUlB,QAKV,C","sources":["pages/Cast.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Loader from 'components/Loader';\nimport ErrorMessage from 'components/ErrorMessage';\n\nimport { findMovieCreditsById } from 'services/api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  console.log('movieId', movieId);\n  //const location = useLocation();\n  //const backLinkHref = useRef(location.state?.from ?? '/');\n\n  const [movieCredits, setMovieCredits] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const fetchMovieDetails = async () => {\n      try {\n        setIsLoading(true);\n        const data = await findMovieCreditsById(movieId);\n        console.log('findMovieCreditsById', data);\n        setMovieCredits(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <ErrorMessage message={error} />}\n      {movieCredits !== null && (\n        <ul>\n          {movieCredits.cast.map(cast => {\n            return (\n              <li key={cast.id}>\n                <img\n                  src={`https://image.tmdb.org/t/p/w500/${cast.profile_path}`}\n                  alt={cast.name}\n                  width=\"100px\"\n                />\n                <p>{cast.name}</p>\n                <p>Character: {cast.character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["movieId","useParams","console","log","_useState","useState","_useState2","_slicedToArray","movieCredits","setMovieCredits","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","useEffect","fetchMovieDetails","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","findMovieCreditsById","sent","t0","message","finish","stop","apply","arguments","_jsxs","children","_jsx","Loader","ErrorMessage","cast","map","src","concat","profile_path","alt","name","width","character","id"],"sourceRoot":""}